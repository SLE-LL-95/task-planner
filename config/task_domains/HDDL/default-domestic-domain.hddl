(define (domain default-domestic-domain)
    (:requirements :strips :typing :equality :hierachie)

    (:types
        Object - Thing
        Location - Thing
        Waypoint - Location
        Furniture - Object
        Category
        Robot - Interactor
        Door - Object
        Plane - Object
        Person - Interactor
        NamedPose
        GraspingStrategy
        Context
    )

    (:constants pick_from_plane pick_from_container place_on_plane place_in_container - Context)

    (:predicates
        (robotName ?Robot - Robot)
        (objectCategory ?Object0 - Object ?Object1 - Object)
        (robotAt ?Robot - Robot ?Waypoint - Waypoint)
        (doorAt ?Door - Door ?Waypoint - Waypoint)
        (objectAt ?Object - Object ?Waypoint - Waypoint)
        (furnitureAt ?Furniture - Furniture ?Waypoint - Waypoint)
        (planeAt ?Plane - Plane ?Waypoint - Waypoint)
        (personAt ?Person - Person ?Waypoint - Waypoint)
        (doorOpen ?Door - Door)
        (belongsTo ?Plane - Plane ?Object - Object)
        (unexplored ?Plane - Plane)
        (explored ?Plane - Plane)
        (holding ?Interactor - Interactor ?Object - Object)
        (emptyGripper ?Robot - Robot)
        (known ?Person - Person)
        (unknown ?Person - Person)
        (scanned ?Person - Person)
        (unscanned ?Person - Person)

        (canPlaceOn ?Object - Object ?Plane - Plane)
        (defaultStoringLocation ?Object - Object ?Furniture - Furniture)
        (likelyLocation ?Object - Object ?Furniture - Furniture)
        (locatedAt ?Object - Object ?Location - Location)
        (hasDoor ?Furniture - Furniture)
        (above ?Object0 - Object ?Object1 - Object)
        (below ?Object0 - Object ?Object1 - Object)
        (onTopOf ?Object0 - Object ?Object1 - Object)
        (inside ?Object0 - Object ?Object1 - Object)
        (toTheLeftOf ?Object0 - Object ?Object1 - Object)
        (toTheRightOf ?Object0 - Object ?Object1 - Object)
        (isAtNamedPose ?Thing - Thing ?NamedPose - NamedPose)
        (isAtLocation ?NamedPose - NamedPose ?Location - Location)
        (preferredGraspingStrategy ?Object - Object ?GraspingStrategy - GraspingStrategy)
    )

    (:task pick
        :parameters (?o1 - Object ?o2 - Object ?r - Robot ?loc - Location)
        :precondition ()
        :effect ()
    )

    (:task open_door
        :parameters (?loc - Location)
        :precondition ()
        :effect ()
    )

    (:task pick_random_object
        :parameters (?l2 - Location ?r - Robot)
        :precondition ()
        :effect ()
    )

    (:task bring_object
        :parameters (?p - Person ?o - Object ?r - Robot)
        :precondition ()
        :effect ()
    )

    (:task scan_person
        :parameters (?p - Person ?r - Robot ?wp - Waypoint)
        :precondition ()
        :effect ()
    )

    (:task perceive_plane
        :parameters (?plane - Plane ?r - Robot ?wp - Waypoint)
        :precondition ()
        :effect ()
    )

    (:method m_perceive_plane_unexplored
        :parameters(?plane - Plane ?r - Robot ?wp - Waypoint)
        :task(perceive_plane ?plane ?r ?wp)
        :subtasks (and
            (task0 (PerceivePlane ?plane ?r ?wp))
        )
    )

    (:method m_perceive_plane_already_explored
        :parameters(?plane - Plane ?r - Robot ?wp - Waypoint)
        :task(perceive_plane ?plane ?r ?wp)
        :precondition (explored ?plane)
        :subtasks ()
    )


    (:method m_scan_person_unscanned
        :parameters(?p - Person ?r - Robot ?wp - Waypoint)
        :task(scan_person ?p ?r ?wp)
        :subtasks (and
            (task0 (FindPeople ?p ?r ?wp))
        )
    )

    (:method m_scan_person_already_scanned
        :parameters(?p - Person ?r - Robot ?wp - Waypoint)
        :task(scan_person ?p ?r ?wp)
        :precondition (scanned ?p)
        :subtasks ()
    )

    (:method m_pick_from_plane
        :parameters (?o - Object ?p - Plane ?r - Robot ?loc - Location)
        :task (pick ?o ?p ?r ?loc)
        :subtasks (and
            (task0 (PickFromPlane ?o ?p ?r ?loc))
        )
    )

    (:method m_pick_from_furniture
        :parameters (?o - Object ?f - Furniture ?r - Robot ?loc - Location)
        :task (pick ?o ?f ?r ?loc)
        :subtasks (and
            (task0 (PickFromFurniture ?o ?f ?r ?loc))
        )
    )

    (:method m_open_std_door
        :parameters (?d - Door ?r - Robot ?loc - Location)
        :task (open_door ?loc)
        :subtasks (and
            (task0 (Open ?d ?r ?loc))
        )
    )

    (:method m_open_no_door
        :parameters (?d - Door ?r - Robot ?loc - Location)
        :task (open_door ?loc)
        :precondition (forall (?dx - Door) (not (doorAt ?dx ?loc)))
        :subtasks ()
    )

    (:method m_random_object
        :parameters(?l1 - Location ?l2 - Location ?r - Robot ?o - Object ?fromobj - Object)
        :task (pick_random_object ?l2 ?r)
        :subtasks (and
            (task0 (MoveBase ?r ?l1 ?l2))
            (task1 (pick ?o ?fromobj ?r ?l2))
        )
        :ordering(and
            (task0 < task1)
        )
    )

    (:method m_bring_object_furniture
        :parameters (?p - Person ?o - Object ?r - Robot ?p_loc - Location ?o_loc - Location ?r_loc - Location ?door - Door ?furniture - Furniture)
        :task (bring_object ?p ?o ?r)
        :subtasks (and
            (task0 (MoveBase ?r ?r_loc ?o_loc))
            (task1 (open_door ?o_loc))
            (task2 (pick ?o ?furniture ?r ?o_loc))
            (task3 (MoveBase ?r ?o_loc ?p_loc))
            (task4 (scan_person ?p ?r ?p_loc))
            (task5 (HandOver ?o ?r ?p ?p_loc))
        )
        :ordering(and
            (task0 < task1)
	        (task1 < task2)
            (task2 < task3)
            (task3 < task4)
            (task4 < task5)
        )
    )

    (:method m_bring_object_plane
        :parameters (?p - Person ?o - Object ?r - Robot ?p_loc - Location ?o_loc - Location ?r_loc - Location ?plane - Plane)
        :task (bring_object ?p ?o ?r)
        :subtasks (and
            (task0 (MoveBase ?r ?r_loc ?o_loc))
            (task1 (perceive_plane ?plane ?r ?o_loc))
            (task2 (pick ?o ?plane ?r ?o_loc))
            (task3 (MoveBase ?r ?o_loc ?p_loc))
            (task4 (scan_person ?p ?r ?p_loc))
            (task5 (HandOver ?o ?r ?p ?p_loc))
        )
        :ordering(and
            (task0 < task1)
	        (task1 < task2)
            (task2 < task3)
            (task3 < task4)
            (task4 < task5)
        )
    )

    (:action MoveBase
        :parameters (?Robot - Robot ?Location0 ?Location1 - Location)
        :precondition (and
            (robotAt ?Robot ?Location0)
        )
        :effect (and
            (not (robotAt ?Robot ?Location0))
            (robotAt ?Robot ?Location1)
        )
    )

    (:action Open
        :parameters (?Door - Door ?Robot - Robot ?Waypoint - Waypoint)
        :precondition (and
            (doorAt ?Door ?Waypoint)
            (robotAt ?Robot ?Waypoint)
        )
        :effect (and
            (doorOpen ?Door)
        )
    )

    (:action PerceivePlane
        :parameters (?Plane - Plane ?Robot - Robot ?Waypoint - Waypoint)
        :precondition (and
            (robotAt ?Robot ?Waypoint)
            (planeAt ?Plane ?Waypoint)
            (unexplored ?Plane)
        )
        :effect (and
            (not (unexplored ?Plane))
            (explored ?Plane)
        )
    )

    (:action PickFromPlane
        :parameters (?Object - Object ?Plane - Plane ?Robot - Robot ?Waypoint - Waypoint)
        :precondition (and
            (robotAt ?Robot ?Waypoint)
            (planeAt ?Plane ?Waypoint)
            (explored ?Plane)
            (onTopOf ?Object ?Plane)
            (emptyGripper ?Robot)
        )
        :effect (and
            (not (onTopOf ?Object ?Plane))
            (not (emptyGripper ?Robot))
            (holding ?Robot ?Object)
        )
    )

    (:action PickFromFurniture
        :parameters (?Object - Object ?Furniture - Furniture ?Robot - Robot ?Waypoint - Waypoint)
        :precondition (and
            (robotAt ?Robot ?Waypoint)
            (furnitureAt ?Furniture ?Waypoint)
            (inside ?Object ?Furniture)
            (emptyGripper ?Robot)
        )
        :effect (and
            (not (inside ?Object ?Furniture))
            (not (emptyGripper ?Robot))
            (holding ?Robot ?Object)
        )
    )

    (:action PlaceOnPlane
        :parameters (?Object - Object ?Plane - Plane ?Robot - Robot ?Waypoint - Waypoint)
        :precondition (and
            (robotAt ?Robot ?Waypoint)
            (planeAt ?Plane ?Waypoint)
            (holding ?Robot ?Object)
        )
        :effect (and
            (not (holding ?Robot ?Object))
            (emptyGripper ?Robot)
            (onTopOf ?Object ?Plane)
        )
    )

    (:action PlaceOnFurniture
        :parameters (?Object - Object ?Furniture - Furniture ?Robot - Robot ?Waypoint - Waypoint)
        :precondition (and
            (robotAt ?Robot ?Waypoint)
            (furnitureAt ?Furniture ?Waypoint)
            (holding ?Robot ?Object)
        )
        :effect (and
            (not (holding ?Robot ?Object))
            (emptyGripper ?Robot)
            (inside ?Object ?Furniture)
        )
    )

    (:action Throw
        :parameters (?Object0 - Object ?Object1 - Object ?Robot - Robot ?Waypoint - Waypoint)
        :precondition (and
            (robotAt ?Robot ?Waypoint)
            (objectAt ?Object1 ?Waypoint)
            (holding ?Robot ?Object0)
        )
        :effect (and
            (not (holding ?Robot ?Object0))
            (emptyGripper ?Robot)
            (inside ?Object0 ?Object1)
        )
    )

    (:action HandOver
        :parameters (?Object - Object ?Robot - Robot ?Person - Person ?Waypoint - Waypoint)
        :precondition (and
            (robotAt ?Robot ?Waypoint)
            (personAt ?Person ?Waypoint)
            (holding ?Robot ?Object)
        )
        :effect (and
            (not (holding ?Robot ?Object))
            (holding ?Person ?Object)
        )
    )

    (:action FindPeople
        :parameters (?Person - Person ?Robot - Robot ?Waypoint - Waypoint)
        :precondition (and
            (robotAt ?Robot ?Waypoint)
            (personAt ?Person ?Waypoint)
            (unscanned ?Person)
        )
        :effect (and
            (not (unscanned ?Person))
            (scanned ?Person)
        )
    )
)